@startuml
class MasterMind
class PlayMasterMind {
 - continueDialog : InitYesNoDialog
 - game : InitGame
}
class InitYesNoDialog {
 - question : String
 - answer : String
 
 - isNegative() : boolean
 + read() : void
 + isAffirmative() : boolean
}

class InitGame {
 + play() : void
}
class Board {
 - TITLE : String
 - ALLOWED_COLORS : String[]
 - COMBINATIONS_LENGTH : Number
 - MAXIMUN_ATTEMPTS : Number
 - attempts : Number
 - resultsOfComparingCombinations : String[]
 - proposedCombinations : String[]
 
 + showTitle() : void
 + showAttempts() : void
 + getAttempts() : attempts
 + getCombinationsLength() : COMBINATIONS_LENGTH
 + getMaximunAttempts() : MAXIMUN_ATTEMPTS
 + showComparisonResult() : void
 + increaseAttemptsByOne() : void
 + showWinningMessage() : void
 + showLosingMessage() : void
 
}

class SecretCombinationCreator {
 - secretCombination : String[]
 - WELL_POSITIONED : "b"
 - POORLY_POSITIONED : "W"
 - EMPTY : "e"
 - correctCombination : boolean
 
 - isRepeatedColor(color, secretCombination) : boolean
 - isWellPositioned(proposedColor, secretColor) : boolean
 - isPoorlyPositioned(secretCombination, colorToVerify) : boolean
 + setCombinationWithoutRepeatedColors(Board board) : void
 + getSecretCombination() : secretCombination
 + compare(String[] combination) : void
 + getResultsOfComparingCombination() : String[][]
 + verifyCorrectCombination() : boolean
 + isCorrectCombination() : correctCombination
}
class Decipher {
 - isValidCombination(String proposedCombination, Board board) : boolean
 - areValidColors(String proposedCombination, Board board) : boolean
 - isAllowed(String color, Board board) : boolean
 - thereAreRepeatedColors(String proposedCombination) : boolean
 + proposeAValid(Board board) : void
 + getProposedCombinations() : String[]
}

MasterMind *-- PlayMasterMind

PlayMasterMind --> InitYesNoDialog
PlayMasterMind --> InitGame

InitGame *-- Board
InitGame *-- SecretCombinationCreator

note left of SecretCombinationCreator::compare
 Check
end note
note left of SecretCombinationCreator::getResultsOfComparingCombination
 Check
end note
note left of SecretCombinationCreator::verifyCorrectCombination
 Check
end note
note left of Decipher::getProposedCombinations
 Cambiar por getProposedCombinationCurrently(attempt) : String
end note
note left of SecretCombinationCreator::correctCombination
 Cambiar por "es decifrada"
end note
@enduml